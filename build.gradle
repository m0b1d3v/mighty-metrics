import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {

	id 'application' // CLI usage
	id 'jacoco' // Test coverage

	id 'com.github.ben-manes.versions' version '0.48.0' // Dependency update checks
	id 'io.freefair.lombok' version '8.3' // Boilerplate reduction
	id 'io.sentry.jvm.gradle' version '3.13.0' // Exception monitoring
	id 'io.spring.dependency-management' version '1.1.3' // Transitive/exclusion dependency management
	id 'org.owasp.dependencycheck' version '8.4.0' // Dependency vulnerability checks
	id 'org.sonarqube' version '4.4.0.3356' // Source code analysis
	id 'org.springframework.boot' version '3.1.4' // Framework

}

group = 'dev.m0b1'
version = 'development'

java {
	sourceCompatibility = JavaVersion.VERSION_17
}

repositories {
	mavenCentral()
}

dependencies {

	// Resource file inspections for editors
	annotationProcessor('org.springframework.boot:spring-boot-configuration-processor')

	// Disable template caching, automatic restart, live reload
	developmentOnly('org.springframework.boot:spring-boot-devtools')

	// Used for JSON formatting of log messages
	// As of logback-classic:1.4.8 it includes a native JSON encoder, but it is not configurable for our purposes
	implementation('net.logstash.logback:logstash-logback-encoder:7.4')

	// Image recognition
	implementation('com.google.guava:guava:32.1.2-jre')
	implementation('com.google.cloud:google-cloud-vision:3.22.0') {
		exclude group: 'commons-logging', module: 'commons-logging'
	}

	// Framework

	implementation('org.springframework.boot:spring-boot-starter')
	implementation('org.springframework.boot:spring-boot-starter-jdbc')
	implementation('org.springframework.boot:spring-boot-starter-oauth2-client')
	implementation('org.springframework.boot:spring-boot-starter-thymeleaf')
	implementation('org.springframework.boot:spring-boot-starter-validation')
	implementation('org.springframework.boot:spring-boot-starter-web')

	implementation('org.springframework.session:spring-session-jdbc')

	// Templates
	implementation('org.thymeleaf.extras:thymeleaf-extras-springsecurity6:3.1.2.RELEASE')

	// Front-end
	implementation('org.webjars.npm:htmx.org:1.9.8')
	implementation('org.webjars.npm:picocss__pico:1.5.10')

	// Database
	implementation('org.xerial:sqlite-jdbc:3.43.0.0')

	// Testing
	testImplementation('org.springframework.boot:spring-boot-starter-test')
	testImplementation('org.springframework.security:spring-security-test')
	testImplementation('com.microsoft.playwright:playwright:1.39.0')
	testImplementation('com.deque.html.axe-core:playwright:4.8.0')

}

dependencyCheck {
	analyzers {
		assemblyEnabled = false
	}
}

tasks.named('test') {

	// Enable JUnit 5
	useJUnitPlatform()

	// Put out coverage reports for tests
	finalizedBy jacocoTestReport

	testLogging {
		events = [
			TestLogEvent.PASSED,
			TestLogEvent.SKIPPED,
			TestLogEvent.FAILED,
		]
	}

}

jacocoTestReport {

	// Don't run without tests first
	dependsOn test

	// Sonar needs the XML reports
	reports {
		xml.required = true
	}

}

sonarqube {
	properties {
		property('sonar.host.url', 'https://sonarcloud.io')
		property('sonar.organization', 'm0b1')
		property('sonar.projectKey', 'm0b1_mighty-metrics')
		property('sonar.skipCompile', 'true')
	}
}
